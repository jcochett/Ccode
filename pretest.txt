#include <Windows.h>
#include <stdio.h>
#include "TestCode.h"

/////////////////////////////////////////////////////////////////////////////////////////////
// Test 1: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to fix any words incorrectly spelled words by replacing
//         every occurence of the letter 'y' with 's'.
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
//		- the letter 'y' is not part of 'sentence': should return ERROR_NOT_FOUND (1168)
/////////////////////////////////////////////////////////////////////////////////////////////
int changeLetterInString(char *sentence)
{
	int i = 0;
	int success = ERROR_INVALID_PARAMETER;

	if (!sentence)
		return success;

	if (strlen(sentence) == 0)
		return success;

	success = ERROR_NOT_FOUND;
	
	for (i = 0; i < strlen(sentence); i++)
	{
		if (*(sentence + i) == 'y')
		{
			*(sentence + i) = 's';
			success = ERROR_SUCCESS;			
		}
	}

	return success;
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 2: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to fix the sentence by reversing every occurence of
//         "drow" with "word"
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
//		- the word "drow" is not part of 'sentence': should return ERROR_NOT_FOUND (1168)
/////////////////////////////////////////////////////////////////////////////////////////////
int reverseWord(char *sentence)
{
	int success = ERROR_INVALID_PARAMETER;
	int i = 0;
	char *drizzt = 0;
	char *elf = sentence;

	if (!sentence)
		return success;

	success = ERROR_NOT_FOUND;

	while (drizzt = strstr(elf, "drow"))
	{

		drizzt[0] = 'w';
		drizzt[1] = 'o';
		drizzt[2] = 'r';
		drizzt[3] = 'd';

		elf += 4;	
	
		success = ERROR_SUCCESS;
	}

	return success;
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 3: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to obfuscate the sentence by "ZORing" (XORing) each byte with the
//         given key
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
/////////////////////////////////////////////////////////////////////////////////////////////
int obfuscateString(char *sentence, char key)
{
	int i = 0;

	if (!sentence || !key)
		return ERROR_INVALID_PARAMETER;
	
	for (i = 0; i < strlen(sentence); i++)
		*(sentence + i) ^= key;

	return ERROR_SUCCESS;
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 4: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to concatenate sentence1 and sentence2
//         sentence1 will hold the concatenated strings
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
/////////////////////////////////////////////////////////////////////////////////////////////
int combineStrings(char *sentence1, int sentence1Length, char *sentence2, int sentence2Length, int bufferSize)
{
	int i = 0;

	if (!sentence1 || !sentence2 || (sentence1Length < 1) || (sentence2Length < 1) || (bufferSize < (sentence1Length + sentence2Length)))
		return ERROR_INVALID_PARAMETER;
	
	for (; i < sentence2Length ; i++, sentence1Length++)
		*(sentence1 + sentence1Length) = *(sentence2 + i);
	
	*(sentence2 + 1);

	return ERROR_SUCCESS;
}
/////////////////////////////////////////////////////////////////////////////////////////////
// Test 5: For this task, you will receive a pointer to NULL terminated string: 
//		   The objective will be to insert the missing word into the sentence.
//         "O'er the land of the <insert> and the home of the brave."
//			The word "free" is missing and needs to be inserted
//
// Expected Return Values:
//		- the task is successful: should return ERROR_SUCCESS (0).
//		- provided parameters are bad: should return ERROR_INVALID_PARAMETER (87)
/////////////////////////////////////////////////////////////////////////////////////////////
int insertWord(char *sentence, int sentenceLength, char *word, int wordLength, int loc)
{
	int i = 0;
	int j = 0;
	char c, d;
	
	if (!sentence || !word || sentenceLength < 1 || wordLength < 1 || (loc > sentenceLength - wordLength))
		return ERROR_INVALID_PARAMETER;

	for (i = 0; i < wordLength - 1; i++, loc++)
	{
		c = *(sentence + loc);
		for (j = loc; j < sentenceLength + i; j++)
		{	
			d = *(sentence + j + 1);
			*(sentence + j + 1) = c;
			c = d;
		}

		*(sentence + loc) = *(word + i);
	}

	return ERROR_SUCCESS;
}

////////////////////////////////////////////////////////////////////////////////////////////////
// Test 6: For this task, you will be given a comma separated string containing letters from the
//			alphabet that you must split into individual elements and assign each one to a singly
//			linked list node. The linked list must be in alphabetical order. You should then
//			traverse the linked list and return a string containing the letters, without commas
//			or spaces. For example, given the input string "t,u,v,w", you should split it into 4
//			elements, traverse over those nodes, and return the string "tuvw".
//			
//			HINT: You should probably use all or some of the below functions to help with the
//					function letterList. The function should return a head pointer that the tester 
//					is able to use to verify the order of your linked list.
//			
//			The linked list structure "node" and the linked list head structure "list" are given
//			in the header file.
/////////////////////////////////////////////////////////////////////////////////////////////////


//typedef struct _node {
//	char letter;
//	struct _node* next;
//} node, *pnode;
//
//typedef struct _list {
//	pnode head;
//} list, *plist;

// Return the size of the comma-separated input string after you have parsed it
size_t determineSize(char input[])
{
	size_t length = 0;
	
	while (*input) if (*input++ != ',') length++;	// Increment length if not a comma

	return length;
}

// This method should create an empty list and return the list pointer with the head initialized
plist createList()
{
	plist nodeList = malloc(sizeof(list));
	nodeList->head = NULL;

	return nodeList;
}

// This method should append a node *TO THE FRONT* of the list. Pay attention to the special case
// of when the list is empty
pnode appendNode(plist nodeList, char nodeData)
{
	pnode newNode = malloc(sizeof(node));
	pnode nxtNode;
	newNode->letter = nodeData;
	

	if (nodeList->head == NULL) // empty list
	{
		newNode->next = nodeList->head;
		nodeList->head = newNode;
		return newNode;
	}

	nxtNode = nodeList->head;
	while (nxtNode->next != NULL)
	{
		nxtNode = nxtNode->next;
	}

	newNode->next = nodeList->head;
	nodeList->head = newNode;
	
	return newNode;
}

pnode insertNode(plist nodeList, char nodeData, int position)
{
	pnode nxtNode;
	pnode newNode = malloc(sizeof(node));
	newNode->letter = nodeData;

	nxtNode = nodeList->head;

	while (position)
	{
		nxtNode = nxtNode->next;
		if (!nxtNode) return NULL; // We gots problems		
		position--;
	}

	newNode->next = nxtNode->next;
	nxtNode->next = newNode;

	return newNode;
}

char removeNode(plist nodeList, int position)
{
	pnode nxtNode = nodeList->head;
	pnode prvNode = 0;
	char letter;

	if (nxtNode == NULL || nxtNode->next == NULL)
		return 0;   // We got problems

	while (position >= 0)
	{
		prvNode = nxtNode;
		nxtNode = nxtNode->next;
		if (!nxtNode) return 0; // We gots problems		
		position--;
	}

	letter = nxtNode->letter;

	prvNode->next = nxtNode->next;
	
	return letter;
}

// Implement this last using the previous methods
pnode letterList(char input[])
{
	plist nodeList = NULL;
	size_t input_size = 0;
	int index = 0, count = 0;

	input_size = determineSize(input);
	
	nodeList = createList();

	for (index = 0, count = 0; count < input_size; index++)
	{
		if (input[index] != ',')
		{
			appendNode(nodeList, input[index]);
			count++;
		}
	}

	//pnode insertNode(plist nodeList, char nodeData, int position)
	//char removeNode(plist nodeList, int position)
	
	return nodeList->head;
}